// Code generated by MockGen. DO NOT EDIT.
// Source: client_delegate.go

// Package connector is a generated GoMock package.
package connector

import (
	context "context"
	io "io"
	reflect "reflect"

	azblob "github.com/Azure/azure-storage-blob-go/azblob"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureBlobStorageClient is a mock of AzureBlobStorageClient interface.
type MockAzureBlobStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureBlobStorageClientMockRecorder
}

// MockAzureBlobStorageClientMockRecorder is the mock recorder for MockAzureBlobStorageClient.
type MockAzureBlobStorageClientMockRecorder struct {
	mock *MockAzureBlobStorageClient
}

// NewMockAzureBlobStorageClient creates a new mock instance.
func NewMockAzureBlobStorageClient(ctrl *gomock.Controller) *MockAzureBlobStorageClient {
	mock := &MockAzureBlobStorageClient{ctrl: ctrl}
	mock.recorder = &MockAzureBlobStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureBlobStorageClient) EXPECT() *MockAzureBlobStorageClientMockRecorder {
	return m.recorder
}

// Container mocks base method.
func (m *MockAzureBlobStorageClient) Container(containerName string) ContainerHandleWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container", containerName)
	ret0, _ := ret[0].(ContainerHandleWrapper)
	return ret0
}

// Container indicates an expected call of Container.
func (mr *MockAzureBlobStorageClientMockRecorder) Container(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockAzureBlobStorageClient)(nil).Container), containerName)
}

// MockContainerHandleWrapper is a mock of ContainerHandleWrapper interface.
type MockContainerHandleWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockContainerHandleWrapperMockRecorder
}

// MockContainerHandleWrapperMockRecorder is the mock recorder for MockContainerHandleWrapper.
type MockContainerHandleWrapperMockRecorder struct {
	mock *MockContainerHandleWrapper
}

// NewMockContainerHandleWrapper creates a new mock instance.
func NewMockContainerHandleWrapper(ctrl *gomock.Controller) *MockContainerHandleWrapper {
	mock := &MockContainerHandleWrapper{ctrl: ctrl}
	mock.recorder = &MockContainerHandleWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerHandleWrapper) EXPECT() *MockContainerHandleWrapperMockRecorder {
	return m.recorder
}

// Blob mocks base method.
func (m *MockContainerHandleWrapper) Blob(blobName string) BlobHandleWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blob", blobName)
	ret0, _ := ret[0].(BlobHandleWrapper)
	return ret0
}

// Blob indicates an expected call of Blob.
func (mr *MockContainerHandleWrapperMockRecorder) Blob(blobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blob", reflect.TypeOf((*MockContainerHandleWrapper)(nil).Blob), blobName)
}

// GetProperties mocks base method.
func (m *MockContainerHandleWrapper) GetProperties(ctx context.Context, ac azblob.LeaseAccessConditions) (*azblob.ContainerGetPropertiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", ctx, ac)
	ret0, _ := ret[0].(*azblob.ContainerGetPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockContainerHandleWrapperMockRecorder) GetProperties(ctx, ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockContainerHandleWrapper)(nil).GetProperties), ctx, ac)
}

// ListBlobsFlatSegment mocks base method.
func (m *MockContainerHandleWrapper) ListBlobsFlatSegment(ctx context.Context, marker azblob.Marker, options azblob.ListBlobsSegmentOptions) (*azblob.ListBlobsFlatSegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlobsFlatSegment", ctx, marker, options)
	ret0, _ := ret[0].(*azblob.ListBlobsFlatSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlobsFlatSegment indicates an expected call of ListBlobsFlatSegment.
func (mr *MockContainerHandleWrapperMockRecorder) ListBlobsFlatSegment(ctx, marker, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlobsFlatSegment", reflect.TypeOf((*MockContainerHandleWrapper)(nil).ListBlobsFlatSegment), ctx, marker, options)
}

// MockBlobHandleWrapper is a mock of BlobHandleWrapper interface.
type MockBlobHandleWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockBlobHandleWrapperMockRecorder
}

// MockBlobHandleWrapperMockRecorder is the mock recorder for MockBlobHandleWrapper.
type MockBlobHandleWrapperMockRecorder struct {
	mock *MockBlobHandleWrapper
}

// NewMockBlobHandleWrapper creates a new mock instance.
func NewMockBlobHandleWrapper(ctrl *gomock.Controller) *MockBlobHandleWrapper {
	mock := &MockBlobHandleWrapper{ctrl: ctrl}
	mock.recorder = &MockBlobHandleWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobHandleWrapper) EXPECT() *MockBlobHandleWrapperMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockBlobHandleWrapper) Download(ctx context.Context, offset, count int64, ac azblob.BlobAccessConditions, getsMD5 bool, cpk azblob.ClientProvidedKeyOptions) (*azblob.DownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, offset, count, ac, getsMD5, cpk)
	ret0, _ := ret[0].(*azblob.DownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockBlobHandleWrapperMockRecorder) Download(ctx, offset, count, ac, getsMD5, cpk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockBlobHandleWrapper)(nil).Download), ctx, offset, count, ac, getsMD5, cpk)
}

// GetProperties mocks base method.
func (m *MockBlobHandleWrapper) GetProperties(ctx context.Context, ac azblob.BlobAccessConditions, cpk azblob.ClientProvidedKeyOptions) (*azblob.BlobGetPropertiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", ctx, ac, cpk)
	ret0, _ := ret[0].(*azblob.BlobGetPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockBlobHandleWrapperMockRecorder) GetProperties(ctx, ac, cpk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockBlobHandleWrapper)(nil).GetProperties), ctx, ac, cpk)
}

// Upload mocks base method.
func (m *MockBlobHandleWrapper) Upload(ctx context.Context, body io.ReadSeeker, headers azblob.BlobHTTPHeaders, metadata azblob.Metadata, ac azblob.BlobAccessConditions, tier azblob.AccessTierType, tags azblob.BlobTagsMap, cpk azblob.ClientProvidedKeyOptions) (*azblob.BlockBlobUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, body, headers, metadata, ac, tier, tags, cpk)
	ret0, _ := ret[0].(*azblob.BlockBlobUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockBlobHandleWrapperMockRecorder) Upload(ctx, body, headers, metadata, ac, tier, tags, cpk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockBlobHandleWrapper)(nil).Upload), ctx, body, headers, metadata, ac, tier, tags, cpk)
}